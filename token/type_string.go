// Code generated by "stringer -type=Type token/scanner.go token/tokens.go token/type_string.go"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LeftBracket-0]
	_ = x[RightBracket-1]
	_ = x[LeftParen-2]
	_ = x[RightParen-3]
	_ = x[LeftCurlyBracket-4]
	_ = x[RightCurlyBracket-5]
	_ = x[Comma-6]
	_ = x[Period-7]
	_ = x[Colon-8]
	_ = x[Tilde-9]
	_ = x[Equal-10]
	_ = x[SingleQuote-11]
	_ = x[DoubleQuote-12]
	_ = x[Minus-13]
	_ = x[Arrow-14]
	_ = x[Ident-15]
	_ = x[Tag-16]
	_ = x[Print-17]
	_ = x[Get-18]
	_ = x[Post-19]
	_ = x[Nil-20]
	_ = x[True-21]
	_ = x[False-22]
	_ = x[String-23]
	_ = x[Number-24]
	_ = x[Newline-25]
	_ = x[EOF-26]
}

const _Type_name = "LeftBracketRightBracketLeftParenRightParenLeftCurlyBracketRightCurlyBracketCommaPeriodColonTildeEqualSingleQuoteDoubleQuoteMinusArrowIdentTagPrintGetPostNilTrueFalseStringNumberNewlineEOF"

var _Type_index = [...]uint8{0, 11, 23, 32, 42, 58, 75, 80, 86, 91, 96, 101, 112, 123, 128, 133, 138, 141, 146, 149, 153, 156, 160, 165, 171, 177, 184, 187}

func (i Type) String() string {
	if i < 0 || i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
